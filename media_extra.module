<?php

use Drupal\Component\Utility\DeprecationHelper;
use \Drupal\Core\StringTranslation\ByteSizeMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Symfony\Component\Mime\MimeTypes;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;

/**
 * Implements hook_entity_presave().
 */
function media_extra_entity_presave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityBase) {
    foreach (\Drupal::service('entity_field.manager')->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_name => $field_definition) {
      if (!empty($field_definition->getTargetBundle())) {
        if ($field_definition->getType() == 'image') {
          $images = $entity->get($field_name);
          foreach ($images as $key => $image) {
            $entity_manager = \Drupal::entityTypeManager();
            if (empty($image->alt) && !empty($image->entity)) {
              $images[$key]->alt = preg_replace('/\.[^.\s]+$/', '', $image->entity->getFilename());
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_extra_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->get('step') == 'embed') {
    $entity_element = $form_state->get('entity_element');
    /** @var \Drupal\editor\EditorInterface $editor */
    $editor = $form_state->get('editor');

    if ($editor->getFilterFormat()->filters('me_filter_rotate')->status) {
      $form['attributes']['data-rotate'] = [
        '#title' => t('Rotate'),
        '#type' => 'radios',
        '#options' => [
          'none' => t('None'),
          'left' => t('Left'),
          'right' => t('Right'),
        ],
        '#default_value' => !empty($entity_element['data-rotate']) ? $entity_element['data-rotate'] : 'none',
        '#wrapper_attributes' => ['class' => ['container-inline']],
        '#attributes' => ['class' => ['container-inline']],
      ];
      $form['attributes']['data-rotate-caption'] = [
        '#title' => t('Rotate Caption'),
        '#type' => 'checkbox',
        '#default_value' => isset($entity_element['data-rotate-caption']) ? $entity_element['data-rotate-caption'] : FALSE,
        // '#wrapper_attributes' => ['class' => ['container-inline']],
        // '#attributes' => ['class' => ['container-inline']],
      ];
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * @see template_preprocess_maintenance_page()
 * @see \Drupal\Core\EventSubscriber\ActiveLinkResponseFilter
 */
function media_extra_page_attachments(array &$page) {
  // Ensure the same CSS is loaded in template_preprocess_maintenance_page().
  $page['#attached']['library'][] = 'media_extra/base';
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function media_extra_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = \Drupal::service('extension.list.module')->getPath('media_extra') . '/css/components/rotate.module.css';
}

/**
 * Implements hook_theme().
 */
function media_extra_theme() {
  return [
    'media_extra_file_link' => [
      'variables' => [
        'file' => NULL,
        'description' => NULL,
        'attributes' => [],
        'options' => [
          'file_type' => FALSE,
          'icon' => FALSE,
          'file_size' => FALSE,
        ],
        'icon_position' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A File entity to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_media_extra_file_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
  $file_url_generator = \Drupal::service('file_url_generator');
  $url = $file_url_generator->generate($file->getFileUri());

  $mime_type = $file->getMimeType();

  if ($variables['options']['file_type']) {
    $types = MimeTypes::getDefault()->getExtensions($mime_type);
    if (!empty($types)) {
      $variables['file_type'] = strtoupper(reset($types));
    }
  }


  $classes = [ 'file' ];
  if ($variables['options']['icon']) {
    $options['attributes']['type'] = $mime_type;

    // Classes to add to the file field for icons.
    // Add a specific class for each and every mime type.
    $classes[] = 'file--mime-' . strtr($mime_type, ['/' => '-', '.' => '-']);
    // Add a more general class for groups of well known MIME types.
    $classes[] = 'file--' . file_icon_class($mime_type);
  }

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file->getFilename();
  }

  if ($variables['options']['file_size']) {
    $variables['file_size'] = DeprecationHelper::backwardsCompatibleCall(\Drupal::VERSION, '10.2.0', fn() => ByteSizeMarkup::create($file->getSize() ?? 0), fn() => format_size($file->getSize() ?? 0));
  }

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);

  $variables['link'] = Link::fromTextAndUrl($link_text, $url->mergeOptions($options))->toRenderable();
}
